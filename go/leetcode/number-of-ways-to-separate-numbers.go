package main

import (
	"fmt"
)

func main() {
	fmt.Println(numberOfCombinations("327"))
	fmt.Println(numberOfCombinations("84969"))
	fmt.Println(numberOfCombinations("299737631"))
	fmt.Println(numberOfCombinations("9999999999999"))
	fmt.Println(numberOfCombinations
}

func numberOfCombinations(num string) int {
	if num[:1] == "0" {
		return 0
	}
	maxI := len(num)
	nl := 0
	// 预分配内存空间
	// 这里为了避免重复开辟内存，一次性分配：一个slice存储全部的计数和，一个map存储每个位置的下标
	numMap := make([]int, maxI+1)
	for i := 0; i <= maxI; i++ {
		numMap[i] = nl
		nl += (maxI - i) >> 1
	}
	numList := make([]int, nl+1)
	for i := 1; i < maxI; i++ {
		numI := maxI - i
		if num[numI:numI+1] != "0" {
			for l := 1; l <= i; l++ {
				// 这里表示当前位置的相临L个长度已经对比完了
				if l == i {
					iNum := 0
					pos := numMap[numI]
					// 遍历当前位置的所有相临位置（这里因为会存在i小于当前位长度的情况，所以不用i遍历，而是用下一位的下标减去当前位的下标为总长度）
					for nl := numMap[numI+1] - pos; nl > 0; nl-- {
						if numI-nl >= 0 {
							// 对比相临位的长度与目标位长度是否符合要求，符合要求则把目标位对应的长度的计数和加上，不符合不加
							if num[numI-nl:numI] <= num[numI:numI+nl] {
								numList[numMap[numI-nl]+nl] += numList[pos+nl]
							}
							// 将目标位小于相临位长度的计数和加上
							numList[numMap[numI-nl]+nl] += iNum
							numList[numMap[numI-nl]+nl] %= 1000000007
						}
						// 累加长度小于相临位长度的计数和
						iNum += numList[pos+nl]
						iNum %= 1000000007
					}
				}
				// 这里是对比当前位置相临的L个长度是否符合要求，符合要求的就在当前位置切片的L位置1
				if prI := numI - l; prI >= 0 && num[prI:prI+1] != "0" {
					if i != l || num[prI:numI] <= num[numI:] {
						numList[numMap[prI]+l] = 1
					}
				}
			}
		}
	}
	// fmt.Println(numMap, numList)
	// for i := 0; i < maxI; i++ {
	// 	fmt.Println(i, numList[numMap[i]+1:numMap[i+1]+1])
	// }
	inum := 1
	// 全部计数和逆推完之后，把0位的计数和全部加起来就是最终结果
	for _, n := range numList[:numMap[1]+1] {
		inum += n
		inum = inum % 1000000007
	}
	return inum
}
